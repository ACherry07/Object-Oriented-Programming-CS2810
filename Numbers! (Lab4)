#include <bits/stdc++.h>

using namespace std;

class Complex{

public:
    //constructor
    Complex(double r, double i){
        real = r;
        imaginary = i;
    }

    //destructor
    virtual ~Complex(){}

    //Functions for add. subtract, multiply, reduce
    //add
    Complex add(Complex& complex2){
        
        double re, im;
        re = real + complex2.real;
        im = imaginary + complex2.imaginary;
        Complex result(re,im);
        return result;
    }
    //subtract
    Complex subtract(Complex& complex2){
        double re, im;
        re = real - complex2.real;
        im = imaginary - complex2.imaginary;
        Complex result(re, im);
        return result;

    }
    //multiply
    Complex multiply(Complex& complex2){
        double re, im;
        re = real*complex2.real - imaginary*complex2.imaginary;
        im = real*complex2.imaginary + imaginary*complex2.real;
        Complex result(re, im);
        return result;
    }

    //display
    //to print complex
    virtual void print(){
        cout << setiosflags(ios::fixed) << setprecision(3) << real << " " << imaginary << endl;
    }

    //to print rational
    void printrational(){
        cout << fixed << setprecision(3) << real << endl;
    }

protected:
    double real;
    double imaginary;

};

class Rational: public Complex{

public:
    //Rational class constructor
    Rational(int p, int q):Complex((double)p/(double)q,0){
        num = p;
        denom = q;
    }

    //Destructor
    virtual ~Rational(){}

    //add, subtract and multiply are carried out in Complex

    //findgcd
    int GCD(){
        int n = abs(num);
        int d = abs(denom);
        int t = d;
        while(d!= 0){
            t = d;
            d = n%d;
            n = t;
        }
        return n;
    }

    //reduce function for rationals
    void reduce(){
        int gcd = GCD();
        num = num/gcd;
        denom = denom/gcd;
        if(denom < 0){
            num = -num;
            denom = abs(denom);
        }
        cout << num << " " << denom << endl; 
    }


protected:
    int num;
    int denom;
};

class Natural: public Rational{

public:
    //Constructor
    Natural(int n): Rational(n,1){
        val = n;
    }

    //Destructor
    virtual ~Natural(){}

    //To check primality
    int isprime(){
        if(val == 1){
            return 0;
        }
        if(val == 2){
            return 1;
        }
        for(int i = 2; i <= sqrt(val); i++){
            if(val % i == 0){
                return 0;
            }
        }
        return 1;
    }    

    long long int pow(int base, long long int exp){
        long long int p = 1e9+7;
        long long int ans = 0;
        if(exp == 1){
            return base%p; 
        }
        long long int a1 = pow(base,exp/2);
        ans = (a1*a1)%p;
        if(exp %2 == 1){
            ans = (ans*base)%p;
        }
        return ans;
    }
    long long int pow(int n){
        long long int p = 1e9+7; // prime value
        //modulo inverse is a^(p-2);
        return pow(n,p-2);
    }

    // long long pow(long long int n){
    //     long long int p = 1e9+7;
    //     long long int exp = p-2;
    //     long long int ans = 1;
    //     while(exp > 0){
    //         if(exp%2 == 1){
    //             ans = (ans*n)%p;
    //         }
    //         n = (n*n)%p;
    //         exp = exp/2;
    //     }
    //     return ans;
    // }


    //To calculate inverse modulo p
    void inverse(){
        cout << pow(val) << endl;
    }

protected:
    int val;
};

int main(){
    long long int n;
    cin >> n;
    string command;
    while(n--){
        cin >> command;
        if(command == "complex"){
            string command2;
            cin >> command2;
            if(command2 == "add"){
                double re1,re2,im1,im2;
                cin >> re1 >> im1 >> re2 >> im2;
                Complex num1(re1,im1);
                Complex num2(re2,im2);
                num1.add(num2).print();
            }
            else if(command2 == "sub"){
                double re1,re2,im1,im2;
                cin >> re1 >> im1 >> re2 >> im2;
                Complex num1(re1,im1);
                Complex num2(re2,im2);
                num1.subtract(num2).print();
            }
            else if(command2 == "mult"){
                double re1,re2,im1,im2;
                cin >> re1 >> im1 >> re2 >> im2;
                Complex num1(re1,im1);
                Complex num2(re2,im2);
                num1.multiply(num2).print();
            }
        }
        else if(command == "rational"){
            string command2;
            cin >> command2;
            if(command2 == "add"){
                int n1,d1,n2,d2;
                cin >> n1 >> d1 >> n2 >> d2;
                Rational num1(n1,d1);
                Rational num2(n2,d2);
                num1.add(num2).printrational();
            }
            else if (command2 == "sub"){
                int n1,d1,n2,d2;
                cin >> n1 >> d1 >> n2 >> d2;
                Rational num1(n1,d1);
                Rational num2(n2,d2);
                num1.subtract(num2).printrational();
            }
            else if(command2 == "mult"){
                int n1,d1,n2,d2;
                cin >> n1 >> d1 >> n2 >> d2;
                Rational num1(n1,d1);
                Rational num2(n2,d2);
                num1.multiply(num2).printrational();
            }
            else if(command2 == "reduce"){
                int n1,d1;
                cin >> n1 >> d1;
                Rational num1(n1,d1);
                num1.reduce();
            }
        }
        else if(command == "natural"){
            string command2;
            cin >> command2;
            int val;
            cin >> val;
            Natural num1 (val);
            if(command2 == "isprime"){
                cout << num1.isprime() << endl;
            }
            else if (command2 == "inverse"){
                num1.inverse();
            }
        }
    }
    return 0;
}
